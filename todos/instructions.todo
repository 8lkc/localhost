Server:
☐ It never crashes.
☐ All requests timeout if they are taking too long.
☐ It can listen on multiple ports and instantiate multiple servers at the same time.
☐ You use only one process and one thread.
☐ It receives a request from the browser/client and send a response using the HTTP header and body.
☐ It is compatible with HTTP/1.1 protocol.
☐ You can compare your results with NGINX which will be used as the reference.
☐ It is compatible with the last version of your chosen browser.
☐ It manages at least [GET, POST, DELETE] methods.
☐ It is able to receive file uploads made by the client.
☐ It handles cookies and sessions.
☐ You should create default error pages for at least the following error codes [400,403,404,405,413,500].
☐ It calls epoll function (or equivalent) only once for each client/server communication.
☐ All reads and writes should pass by epoll or equivalent API.
☐ All I/O operations should be non-blocking.
☐ You should manage chunked and unchunked requests.
☐ You should set the right status for each response.

Configuration file:
    ☐ The host (server_address) and one or multiple ports for each server.
    ☐ The first server for a host:port will be the default if the "server_name" didn't match any other server.
    ☐ Path to custom error pages.
    ☐ Limit client body size for uploads.
    Setup routes with one or multiple of the following settings:
        ☐ Define a list of accepted HTTP methods for the route.
        ☐ Define HTTP redirections.
        ☐ Define a directory or a file from where the file should be searched (for example, if /test is rooted to /usr/Desktop, the URL /test/my_page.html will route to /usr/Desktop/my_page.html).
        ☐ Define a default file for the route if the URL is a directory.
        ☐ Specify a CGI to use for a certain file extension.
        ☐ Turn on or off directory listing.
        ☐ Set a default file to answer if the request is a directory.
    ☐ No need to manage comments "(#)".

CGI:
    ☐ Based on the file extension the server will execute the corresponding CGI (for example .php or .py).
    ☐ You need to implement only one CGI of your choice.
    ☐ You are allowed to fork a new process to run the CGI.
    ☐ CGI expects the file to process as first argument and EOF as end of the body.
    ☐ Pay attention to the directory where the CGI will run for correct relative paths handling.
    ☐ The CGI will check PATH_INFO environment variable to define the full path.

Test:
    ☐ Do stress tests with siege `-b [IP]:[PORT]`, it must stay available at all costs (availability should be up to 99.5, it will be tested during audits).
    ☐ Create tests for as many cases as you can (redirections, bad configuration files, static and dynamic pages, default error pages and so on).
    ☐ You will be requested to provide and explain your tests during the audits.
    ☐ You can use the language you prefer to write tests, as long as they are exhaustive and the auditor can check their behavior.
    ☐ Test possible memory leaks before to submit the project.
    ☐ Once again, the server should never crash and never leak memory.
